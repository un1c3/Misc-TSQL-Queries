--TSQL queries

-- employee table which includes employee name,salary, position, and other information


CREATE TABLE Employee (
	ID INT NOT NULL IDENTITY(1,1),CONSTRAINT PK_EmpID PRIMARY KEY (ID),
	LAST_NAME VARCHAR (250) NOT NULL,
	FIRST_NAME VARCHAR (250) NOT NULL,
	HIRE_DATE DATE NOT NULL,
	SALARY INT NOT NULL,
	DEPT_ID INT NOT NULL,CONSTRAINT FK_DEPTID FOREIGN KEY (DEPT_ID) REFERENCES Dept (Dept_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	Gender_ID INT NOT NULL,CONSTRAINT FK_GENDERID FOREIGN KEY (Gender_ID) REFERENCES Gender (Gender_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	University_ID INT NOT NULL,CONSTRAINT FK_UNIVERSITYID FOREIGN KEY (University_ID) REFERENCES University (ID) ON UPDATE CASCADE ON DELETE CASCADE,
	EMP_IMAGE VARBINARY(MAX) NOT NULL
)


-- department lookup table


CREATE TABLE Dept (
	Dept_ID INT NOT NULL IDENTITY(1,1),CONSTRAINT PK_DeptID PRIMARY KEY (Dept_ID),
	Name VARCHAR (50) NOT NULL
)


-- gender lookup table


CREATE TABLE Gender (
	Gender_ID INT NOT NULL IDENTITY(1,1),CONSTRAINT PK_GenderID PRIMARY KEY (Gender_ID),
	Name VARCHAR(10) NOT NULL CHECK (Name IN('Male','Female'))
)


-- university lookup table


CREATE TABLE University (
	ID INT NOT NULL IDENTITY(1,1),CONSTRAINT PK_ID PRIMARY KEY (ID),
	Name VARCHAR (250) NOT NULL
)


-- altering the department table to add Manager for each department and setting the default value to Mr. Manager


ALTER TABLE Dept ADD Manager VARCHAR(250) DEFAULT 'Mr. Manager' NOT NULL


-- join different tables


SELECT FIRST_NAME +' '+ LAST_NAME AS [FULL NAME],SALARY,DEPT.NAME AS [DEPARTMENT NAME],GENDER.NAME,UNIVERSITY.NAME FROM EMPLOYEE INNER JOIN DEPT ON EMPLOYEE.DEPT_ID=DEPT.DEPT_ID INNER JOIN GENDER ON EMPLOYEE.GENDER_ID=GENDER.GENDER_ID INNER JOIN UNIVERSITY ON EMPLOYEE.UNIVERSITY_ID=UNIVERSITY.ID


-- this query displays all departments with payroll exceeding 5000 as well as all sales regardless of if payroll exceeds 5000


SELECT NAME,SUM(SALARY) AS PAYROLL FROM DEPT INNER JOIN EMPLOYEE ON EMPLOYEE.DEPT_ID=DEPT.DEPT_ID WHERE DEPT.DEPT_ID IN (SELECT DEPT_ID FROM EMPLOYEE GROUP BY DEPT_ID HAVING SUM(SALARY)>5000 OR DEPT.DEPT_ID IN (SELECT DEPT_ID FROM DEPT WHERE NAME='SALES')) GROUP BY NAME


-- this query displays all departments with payroll exceeding 5000 and does not show sales at all


SELECT NAME,SUM(SALARY) AS PAYROLL FROM DEPT INNER JOIN EMPLOYEE ON EMPLOYEE.DEPT_ID=DEPT.DEPT_ID WHERE DEPT.DEPT_ID IN (SELECT DEPT_ID FROM EMPLOYEE GROUP BY DEPT_ID HAVING SUM(SALARY)>5000 AND DEPT.DEPT_ID NOT IN (SELECT DEPT_ID FROM DEPT WHERE NAME='SALES')) GROUP BY NAME


-- debug the query


SELECT ID,LAST_NAME SALARY * 12 ANNUAL SALARY FROM EMPLOYEE ORDER BY LAST_NAME WHERE SALARY==1


-- the correct query is as follows


SELECT ID,LAST_NAME,SALARY*12 AS [ANNUAL SALARY] FROM EMPLOYEE WHERE SALARY=1 ORDER BY LAST_NAME


-- update the records in temp table


ALTER TABLE TEMP ADD CONSTRAINT PK_TEMPID PRIMARY KEY (ID)
UPDATE TEMP SET FULL_NAME=REPLACE(REPLACE(FULL_NAME,'mo','Mu'),'Alaa','Ala''a'),HIRE_DATE=CAST(REPLACE(CAST (HIRE_DATE AS VARCHAR),'10:35AM','11:00AM') AS DATETIME),UNIVERSITY_NAME=LOWER(UNIVERSITY_NAME)


-- function to show all employees hired after scott


CREATE FUNCTION F_HR_QUERY()
RETURNS TABLE
AS
RETURN (
	SELECT FIRST_NAME,HIRE_DATE FROM EMPLOYEE WHERE HIRE_DATE>(SELECT HIRE_DATE FROM EMPLOYEE WHERE FIRST_NAME='SCOTT')
)


-- stored procedure to copy data into new table


CREATE PROCEDURE PROC_COPY_TABLE
AS SET NOCOUNT ON;
	SELECT * INTO MyEmployee_New FROM Employee
GO
